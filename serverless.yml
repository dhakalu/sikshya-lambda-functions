# This service deals about access of give user
service: skishya-ciam-service
# app and org for use with dashboard.serverless.com
app: skishya-ciam-service
org: dhakalupenn

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  profile: testProfile
  runtime: nodejs12.x
  stage: dev # this is the environment to which the app will be deployed 
  region: us-east-1
  

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  graphql:
    handler: js/handler/userGraphQL.graphqlHandler
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
     - http:
         path: graphql
         method: post
         cors: true
     - http:
         path: graphql
         method: get
         cors: true
    environment:
      USER_POOL_ID: ${ssm:/sikshya/cognito/dev/pool_id}
      CLIENT_ID: ${ssm:/sikshya/cognito/dev/client_ids/ciam~true}
      AUTH_FLOW: 'ADMIN_USER_PASSWORD_AUTH'
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
   

# you can add CloudFormation resource templates here
# resources:
#  Resources:
#    S3Bucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: ${self:service}
#  Outputs:
#     S3BucketArn:
#       Description: "S3 Bucket Name"
#       Value: '!GettAtt S3Bucket.Arn'
